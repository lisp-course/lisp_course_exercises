ssh 192.168.101.<your-TURTLE-ip-ending>
byobu #start collaborative terminal session

F2 to start new terminal
F3, F4 switch between terminals left/right
F6 to detach from byobu
byobu to reattach to byobu session
F8 to rename terminal

# on your own laptops, put those lines in your ~/.bashrc file
export ROS_IP='192.168.101.<your-OWN-LAPTOP-ip-ending>'
export ROS_MASTER_URI='http://192.168.101.<your-TURTLE-ip-ending>:11311'
export ROS_HOSTNAME='192.168.101.<your-OWN-LAPTOP-ip-ending>'

# use referee:
    # dont launch the launchfile in the referee! only those for the turtles (on the turtles)
    # use cd to go to your assignments repository
    $ git pull
    $ cd ../../../ # until you see devel and build and src
    $ catkin_make --pkg turtle_goal_referee
    $ rosrun turtle_goal_referee referee
    # the referee needs the amcl launch, and base_and_joy_and_laser
    
    topic name: goal_picked_up with the type std_msgs/String

# see file on https://pad.riseup.net/p/lispcourse

# example subscriber:
(defun example-subscriber ()
  (unless (eq (roslisp:node-status) :RUNNING)
    (roslisp:start-ros-node "subscriber"))
  (subscribe "goal_picked_up" "std_msgs/String" 
             (lambda (msg) 
               (roslisp:with-fields (data) msg
                 (roslisp:ros-info goal-sub "Yeah, the treasure ~a was collected!" data)))))

# actionclinet example code:
(defvar *move-base-client* nil)
                          

(defun init-action-cl ient ()
  (setf *move-base-client* (actionlib:make-action-client
                            "move_base"
                            "move_base_msgs/MoveBaseAction"))
  (roslisp:ros-info (navigate-map)
                    "Waiting for move_base action server...")
  ;; workaround for race condition in actionlib wait-for server
  (loop until (actionlib:wait-for-server *move-base-client*))
  (roslisp:ros-info (navigate-map) 
                    "move_base action client created."))

(defun get-action-client ()
  (when (eq nil *move-base-client*)
    (init-action-client))
  *move-base-client*)

(defun make-move-base-goal (pose-stamped-goal)
  (actionlib:make-action-goal (get-action-client)
    target_pose pose-stamped-goal))

(defun call-move-base-action (frame-id translation rotation)
  (unless (eq roslisp::*node-status* :running)
    (roslisp:start-ros-node "move-base-lisp-client"))

  (multiple-value-bind (result status)
      (let ((actionlib:*action-server-timeout* 10.0)
            (the-goal (cl-tf:to-msg 
                       (cl-tf:make-pose-stamped
                        frame-id
                        (roslisp::ros-time)
                        translation rotation))))
        (actionlib:call-goal
         (get-action-client)
         (make-move-base-goal the-goal)))
    (roslisp:ros-info (navigate-map) "Move_base action finished.")
    (values result status)))
                          

